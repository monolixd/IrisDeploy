from fastapi import FastAPI
from pydantic import BaseModel
import joblib
import numpy as np

# ‡∏™‡∏£‡πâ‡∏≤‡∏á FastAPI App
app = FastAPI()

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning
model = joblib.load("iris_model.pkl")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Dictionary ‡πÅ‡∏°‡∏õ‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ
flower_classes = {0: "Setosa", 1: "Versicolor", 2: "Virginica"}

# üìå ‡∏™‡∏£‡πâ‡∏≤‡∏á Pydantic Model ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î JSON Schema
class FlowerInput(BaseModel):
    features: list  # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô List ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

@app.get("/")
async def home():
    return {"message": "üöÄ FastAPI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!"}

@app.post("/predict")
async def predict(input_data: FlowerInput):  # üìå ‡πÉ‡∏ä‡πâ Pydantic Model ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
    try:
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON ‡πÄ‡∏õ‡πá‡∏ô NumPy Array
        features_array = np.array(input_data.features).reshape(1, -1)

        # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        prediction = model.predict(features_array)

        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ
        flower_name = flower_classes[int(prediction[0])]

        return {"prediction": flower_name}

    except Exception as e:
        return {"error": str(e)}

# ‡∏£‡∏±‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå FastAPI
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
